#!/usr/bin/env ruby
#
# Generate w/glossary.xml from content
#
# For whatever reason that is too tiresome to investigate, the docbook
# glossary.sort doesn't seem to work, probably because of the glossary
# abuse I do.
#
# At the same time, do some consistency checking, so maybe it's a good
# thing that glossary.sort doesn't seem to work.
#

require 'pp'
require 'find'
require "rexml/document"

gloss = {}
error = false

ARGV.each do |path|
  base = File.basename(path)
  dir = File.dirname(path)
  wordset = File.basename(dir)
  next if base == 'schemas.xml'
  File.open(path) do |f|
    doc = REXML::Document.new f
    primary = REXML::XPath.match doc, "//glossentry/glossterm/indexterm/primary"
    name = primary[0].text
    if name.nil?
      $stderr.puts "E no name in #{path}"
      error = true
      next
    end
    if wordset.nil?
      $stderr.puts "E no wordset in #{path}"
      error = true
      next
    end

    # consistency checks
    # note: publican disallows xreflabel, so this should eventually go away
    xreflabel = REXML::XPath.match(doc, "//glossentry")[0].attribute('xreflabel').value
    if xreflabel != name
      error = true
      $stderr.puts "E #{path}: xreflabel '#{xreflabel}' does not match name '#{name}'"
    end
    # glossentry/glossterm/cmdsynopsis/command
    command = REXML::XPath.match(doc, "//glossentry/glossterm/cmdsynopsis/command")[0].text
    if command != name
      error = true
      $stderr.puts "E #{path}: command '#{command}' does not match name '#{name}'"
    end
    # glossentry/glossdef/example/title
    example = REXML::XPath.match(doc, "//glossentry/glossdef/example/title")[0]
    if example.nil?
      $stderr.puts "W #{path}: missing example"
    elsif example.text != name
      error = true
      $stderr.puts "E #{path}: example '#{example.text}' does not match name '#{name}'"
    end
    if gloss[name].nil?
      gloss[name] = {}
    end
    if !gloss[name][wordset].nil?
      $stderr.puts "E duplicate name '#{name}' in #{wordset}/#{base} and #{gloss[name][wordset]}"
      error = true
    end
    if !error
      gloss[name][wordset] = "#{wordset}/#{base}"
    end
  end
end

if !error
  puts <<EOF
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE glossary PUBLIC "-//OASIS//DTD DocBook XML V4.3//EN"
                  "http://www.oasis-open.org/docbook/xml/4.3/docbookx.dtd">
<!-- generated by #{$0} -->
<glossary role='forth'>
EOF
  gloss.sort.each do |key,entry|
    entry.sort.each do |wordset,path|
      puts "  <xi:include xmlns:xi=\"http://www.w3.org/2001/XInclude\" href=\"#{path}\"/>"
    end
  end
  puts '</glossary>'
end

exit error ? 1 : 0
